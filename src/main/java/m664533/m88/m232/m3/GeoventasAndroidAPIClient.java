/*
 * GeoventasAndroidAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package m664533.m88.m232.m3;

import java.util.AbstractMap.SimpleEntry;
import java.util.HashMap;
import java.util.Map;
import java.util.function.Consumer;
import m664533.m88.m232.m3.controllers.AuthController;
import m664533.m88.m232.m3.controllers.ClientesController;
import m664533.m88.m232.m3.controllers.ProductosController;
import m664533.m88.m232.m3.http.client.HttpCallback;
import m664533.m88.m232.m3.http.client.HttpClient;
import m664533.m88.m232.m3.http.client.HttpClientConfiguration;
import m664533.m88.m232.m3.http.client.OkClient;
import m664533.m88.m232.m3.http.client.ReadonlyHttpClientConfiguration;

/**
 * Gateway class for the library.
 * This class acts as a factory for Controllers.
 * It holds the state of the SDK.
 */
public final class GeoventasAndroidAPIClient implements Configuration {

    /**
     * Private store for controllers.
     */
    private AuthController auth;
    private ClientesController clientes;
    private ProductosController productos;

    /**
     * Current API environment.
     */
    private final Environment environment;

    /**
     * testServer value.
     */
    private final String testServer;

    /**
     * The HTTP Client instance to use for making HTTP requests.
     */
    private final HttpClient httpClient;

    /**
     * Http Client Configuration instance.
     */
    private final ReadonlyHttpClientConfiguration httpClientConfig;

    /**
     * BearerAuthManager.
     */
    private BearerAuthManager bearerAuthManager;

    /**
     * Map of authentication Managers.
     */
    private Map<String, AuthManager> authManagers;

    /**
     * Callback to be called before and after the HTTP call for an endpoint is made.
     */
    private final HttpCallback httpCallback;

    private GeoventasAndroidAPIClient(Environment environment, String testServer,
            HttpClient httpClient, ReadonlyHttpClientConfiguration httpClientConfig,
            String accessToken, Map<String, AuthManager> authManagers, HttpCallback httpCallback) {
        this.environment = environment;
        this.testServer = testServer;
        this.httpClient = httpClient;
        this.httpClientConfig = httpClientConfig;
        this.httpCallback = httpCallback;

        this.authManagers = (authManagers == null) ? new HashMap<>() : new HashMap<>(authManagers);
        if (this.authManagers.containsKey("global")) {
            this.bearerAuthManager = (BearerAuthManager) this.authManagers.get("global");
        }

        if (!this.authManagers.containsKey("global")
                || !getBearerAuthCredentials().equals(accessToken)) {
            this.bearerAuthManager = new BearerAuthManager(accessToken);
            this.authManagers.put("global", bearerAuthManager);
        }

        auth = new AuthController(this, this.httpClient, this.authManagers, this.httpCallback);
        clientes = new ClientesController(this, this.httpClient, this.authManagers,
                this.httpCallback);
        productos = new ProductosController(this, this.httpClient, this.authManagers,
                this.httpCallback);
    }

    /**
     * Shutdown the underlying HttpClient instance.
     */
    public static void shutdown() {
        OkClient.shutdown();
    }

    /**
     * Get the instance of AuthController.
     * @return auth
     */
    public AuthController getAuthController() {
        return auth;
    }

    /**
     * Get the instance of ClientesController.
     * @return clientes
     */
    public ClientesController getClientesController() {
        return clientes;
    }

    /**
     * Get the instance of ProductosController.
     * @return productos
     */
    public ProductosController getProductosController() {
        return productos;
    }

    /**
     * Current API environment.
     * @return environment
     */
    public Environment getEnvironment() {
        return environment;
    }

    /**
     * testServer value.
     * @return testServer
     */
    public String getTestServer() {
        return testServer;
    }

    /**
     * The HTTP Client instance to use for making HTTP requests.
     * @return httpClient
     */
    private HttpClient getHttpClient() {
        return httpClient;
    }

    /**
     * Http Client Configuration instance.
     * @return httpClientConfig
     */
    public ReadonlyHttpClientConfiguration getHttpClientConfig() {
        return httpClientConfig;
    }

    /**
     * The credentials to use with BearerAuth.
     * @return bearerAuthCredentials
     */
    private BearerAuthCredentials getBearerAuthCredentials() {
        return bearerAuthManager;
    }

    /**
     * OAuth 2.0 Access Token.
     * @return accessToken
     */
    public String getAccessToken() {
        return getBearerAuthCredentials().getAccessToken();
    }

    /**
     * The timeout to use for making HTTP requests.
     * @deprecated This method will be removed in a future version. Use
     *             {@link #getHttpClientConfig()} instead.
     *
     * @return timeout
     */
    @Deprecated
    public long timeout() {
        return httpClientConfig.getTimeout();
    }

    /**
     * Get base URI by current environment.
     * @param server Server for which to get the base URI
     * @return Processed base URI
     */
    public String getBaseUri(Server server) {
        Map<String, SimpleEntry<Object, Boolean>> parameters = new HashMap<>();
        parameters.put("testServer",
                new SimpleEntry<Object, Boolean>(this.testServer, false));
        StringBuilder baseUrl = new StringBuilder(environmentMapper(environment, server));
        ApiHelper.appendUrlWithTemplateParameters(baseUrl, parameters);
        return baseUrl.toString();
    }

    /**
     * Get base URI by current environment.
     * @return Processed base URI
     */
    public String getBaseUri() {
        return getBaseUri(Server.ENUM_DEFAULT);
    }

    /**
     * Base URLs by environment and server aliases.
     * @param environment Environment for which to get the base URI
     * @param server Server for which to get the base URI
     * @return base URL
     */
    private static String environmentMapper(Environment environment, Server server) {
        if (environment.equals(Environment.SANDBOX)) {
            if (server.equals(Server.ENUM_DEFAULT)) {
                return "http://3.232.88.66:4533";
            }
        }
        return "http://3.232.88.66:4533";
    }

    /**
     * Converts this GeoventasAndroidAPIClient into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "GeoventasAndroidAPIClient [" + "environment=" + environment + ", testServer="
                + testServer + ", httpClientConfig=" + httpClientConfig + ", authManagers="
                + authManagers + "]";
    }

    /**
     * Builds a new {@link GeoventasAndroidAPIClient.Builder} object.
     * Creates the instance with the state of the current client.
     * @return a new {@link GeoventasAndroidAPIClient.Builder} object
     */
    public Builder newBuilder() {
        Builder builder = new Builder();
        builder.environment = getEnvironment();
        builder.testServer = getTestServer();
        builder.httpClient = getHttpClient();
        builder.accessToken = getBearerAuthCredentials().getAccessToken();
        builder.authManagers = authManagers;
        builder.httpCallback = httpCallback;
        builder.httpClientConfig(configBldr -> configBldr =
                ((HttpClientConfiguration) httpClientConfig).newBuilder());
        return builder;
    }

    /**
     * Class to build instances of {@link GeoventasAndroidAPIClient}.
     */
    public static class Builder {

        private Environment environment = Environment.SANDBOX;
        private String testServer = "http://3.232.88.66:4533";
        private HttpClient httpClient;
        private String accessToken = "";
        private Map<String, AuthManager> authManagers = null;
        private HttpCallback httpCallback = null;
        private HttpClientConfiguration.Builder httpClientConfigBuilder =
                new HttpClientConfiguration.Builder();


        /**
         * Credentials setter for BearerAuth.
         * @param accessToken String value for accessToken.
         * @return Builder
         */
        public Builder accessToken(String accessToken) {
            if (accessToken == null) {
                throw new NullPointerException("AccessToken cannot be null.");
            }
            this.accessToken = accessToken;
            return this;
        }

        /**
         * Current API environment.
         * @param environment The environment for client.
         * @return Builder
         */
        public Builder environment(Environment environment) {
            this.environment = environment;
            return this;
        }

        /**
         * testServer value.
         * @param testServer The testServer for client.
         * @return Builder
         */
        public Builder testServer(String testServer) {
            this.testServer = testServer;
            return this;
        }

        /**
         * The timeout to use for making HTTP requests.
         * @deprecated This method will be removed in a future version. Use
         *             {@link #httpClientConfig(Consumer) httpClientConfig} instead.
         * @param timeout must be greater then 0.
         * @return Builder
         */
        @Deprecated
        public Builder timeout(long timeout) {
            this.httpClientConfigBuilder.timeout(timeout);
            return this;
        }

        /**
         * HttpCallback.
         * @param httpCallback Callback to be called before and after the HTTP call.
         * @return Builder
         */
        public Builder httpCallback(HttpCallback httpCallback) {
            this.httpCallback = httpCallback;
            return this;
        }

        /**
         * Setter for the Builder of httpClientConfiguration, takes in an operation to be performed
         * on the builder instance of HTTP client configuration.
         * 
         * @param action Consumer for the builder of httpClientConfiguration.
         * @return Builder
         */
        public Builder httpClientConfig(Consumer<HttpClientConfiguration.Builder> action) {
            action.accept(httpClientConfigBuilder);
            return this;
        }

        /**
         * Builds a new GeoventasAndroidAPIClient object using the set fields.
         * @return GeoventasAndroidAPIClient
         */
        public GeoventasAndroidAPIClient build() {
            HttpClientConfiguration httpClientConfig = httpClientConfigBuilder.build();
            httpClient = new OkClient(httpClientConfig);

            return new GeoventasAndroidAPIClient(environment, testServer, httpClient,
                    httpClientConfig, accessToken, authManagers, httpCallback);
        }
    }
}