/*
 * GeoventasAndroidAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package m664533.m88.m232.m3.controllers;

import com.fasterxml.jackson.core.JsonProcessingException;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.CompletableFuture;
import m664533.m88.m232.m3.ApiHelper;
import m664533.m88.m232.m3.AuthManager;
import m664533.m88.m232.m3.Configuration;
import m664533.m88.m232.m3.exceptions.ApiException;
import m664533.m88.m232.m3.http.Headers;
import m664533.m88.m232.m3.http.client.HttpCallback;
import m664533.m88.m232.m3.http.client.HttpClient;
import m664533.m88.m232.m3.http.client.HttpContext;
import m664533.m88.m232.m3.http.request.HttpRequest;
import m664533.m88.m232.m3.http.response.HttpResponse;
import m664533.m88.m232.m3.http.response.HttpStringResponse;

/**
 * This class lists all the endpoints of the groups.
 */
public final class AuthController extends BaseController {

    /**
     * Initializes the controller.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     */
    public AuthController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers) {
        super(config, httpClient, authManagers);
    }

    /**
     * Initializes the controller with HTTPCallback.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     * @param httpCallback    Callback to be called before and after the HTTP call.
     */
    public AuthController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers, HttpCallback httpCallback) {
        super(config, httpClient, authManagers, httpCallback);
    }

    /**
     * @param  body  Optional parameter: Example:
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void authPOST(
            final Map<String, String> body) throws ApiException, IOException {
        HttpRequest request = buildAuthPOSTRequest(body);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        handleAuthPOSTResponse(context);
    }

    /**
     * @param  body  Optional parameter: Example:
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> authPOSTAsync(
            final Map<String, String> body) {
        return makeHttpCallAsync(() -> buildAuthPOSTRequest(body),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleAuthPOSTResponse(context));
    }

    /**
     * Builds the HttpRequest object for authPOST.
     */
    private HttpRequest buildAuthPOSTRequest(
            final Map<String, String> body) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/Auth");

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("Content-Type", "application/json-patch+json");
        headers.add("user-agent", BaseController.userAgent);

        //prepare and invoke the API call request to fetch the response
        String bodyJson = body;
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, null, bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for authPOST.
     * @return An object of type void
     */
    private Void handleAuthPOSTResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //handle errors defined at the API level
        validateResponse(response, context);

        return null;
    }

}